const INITIAL_MODULOUS = 16;
class Node {
    key;
    val;
    constructor(key, val) {
        this.key = key;
        this.val = val;
    }
}
class HashMapIterator {
    valsItr;
    valueFunc;
    constructor(valsItr, valueFunc) {
        this.valsItr = valsItr;
        this.valueFunc = valueFunc;
    }
    next() {
        let itrVal = this.valsItr.next();
        let obj = itrVal?.value;
        if (obj) {
            let value = this.valueFunc(obj);
            return { value };
        }
        else {
            let done = true;
            return { done, value: undefined };
        }
    }
    [Symbol.iterator]() {
        return this;
    }
    [Symbol.toStringTag] = 'HashMapIterator';
    map(callbackfn) {
        let index = 0;
        let valueFunc = this.valueFunc;
        let mapFunc = (node) => {
            return callbackfn(valueFunc(node), index++);
        };
        return new HashMapIterator(this.valsItr, mapFunc);
    }
    filter(predicate) {
        throw new Error('Method not implemented.');
    }
    take(limit) {
        throw new Error('Method not implemented.');
    }
    drop(count) {
        throw new Error('Method not implemented.');
    }
    flatMap(callback) {
        throw new Error('Method not implemented.');
    }
    reduce(callbackfn, initialValue) {
        throw new Error('Method not implemented.');
    }
    toArray() {
        throw new Error('Method not implemented.');
    }
    forEach(callbackfn) {
        throw new Error('Method not implemented.');
    }
    some(predicate) {
        throw new Error('Method not implemented.');
    }
    every(predicate) {
        throw new Error('Method not implemented.');
    }
    find(predicate) {
        throw new Error('Method not implemented.');
    }
    return(value) {
        throw new Error('Method not implemented.');
    }
    throw(e) {
        throw new Error('Method not implemented.');
    }
    [Symbol.dispose]() {
        throw new Error('Method not implemented.');
    }
}
class HashMap {
    valArr = new Array();
    modulous = INITIAL_MODULOUS;
    count = 0;
    hashFunc(key) {
        let res = 0;
        switch (typeof key) {
            case 'boolean': {
                res = key ? 1 : 0;
                break;
            }
            case 'number': {
                res = key;
                break;
            }
            case 'function':
            case 'bigint':
            case 'symbol':
            case 'string': {
                res = this.strHashCode(key.toString());
                break;
            }
            case 'object': {
                res = this.strHashCode(JSON.stringify(key));
                break;
            }
        }
        return res;
    }
    strHashCode(str) {
        let hash = 0;
        if (str.length == 0)
            return hash;
        for (let i = 0; i < str.length; i++) {
            let char = str.charCodeAt(i);
            hash = (hash << 5) - hash + char;
            hash = hash & hash;
        }
        return hash;
    }
    indexCode(hashNum) {
        return hashNum % this.modulous;
    }
    expand() {
        this.valArr.splice(0, 0, ...new Array(this.modulous));
        this.modulous *= 2;
        for (let i = 0; i < this.valArr.length; i++) {
            let obj = this.valArr[i];
            if (obj) {
                let hashNum = this.hashFunc(obj.key);
                let newIdx = this.indexCode(hashNum);
                if (i != newIdx) {
                    this.valArr[i] = null;
                    this.valArr[newIdx] = obj;
                }
            }
        }
    }
    contract() {
        let compress = true;
        let halfMod = this.modulous / 2;
        for (let i = 0; i < halfMod; i++) {
            if (this.valArr[i] != null && this.valArr[i + halfMod] != null) {
                compress = false;
                break;
            }
        }
        if (compress) {
            this.modulous = halfMod;
            for (let i = 0; i < this.valArr.length; i++) {
                let obj = this.valArr[i];
                if (obj) {
                    let hashNum = this.hashFunc(obj.key);
                    let newIdx = this.indexCode(hashNum);
                    if (i != newIdx) {
                        this.valArr[i] = null;
                        this.valArr[newIdx] = obj;
                    }
                }
            }
            this.valArr.splice(this.modulous, this.modulous);
        }
    }
    get size() {
        return this.count;
    }
    clear() {
        this.valArr = new Array();
        this.modulous = INITIAL_MODULOUS;
        this.count = 0;
    }
    delete(key) {
        let idx = this.hashFunc(key);
        if (null == idx)
            return false;
        this.valArr[idx] = null;
        this.count--;
        this.contract();
        return true;
    }
    forEach(callbackfn, thisArg) {
        let that = thisArg ?? this;
        that.valArr.forEach((obj) => {
            if (obj != null) {
                callbackfn(obj.val, obj.key, that);
            }
        });
    }
    get(key) {
        let hashNum = this.hashFunc(key);
        let idx = this.indexCode(hashNum);
        let obj = this.valArr[idx];
        return obj ? obj.val : undefined;
    }
    has(key) {
        let hashNum = this.hashFunc(key);
        let idx = this.indexCode(hashNum);
        let obj = this.valArr[idx];
        return obj ? true : false;
    }
    set(key, value) {
        let hashNum = this.hashFunc(key);
        let idx = this.indexCode(hashNum);
        let prevObj = this.valArr[idx];
        if (prevObj == null || hashNum == this.hashFunc(prevObj.key)) {
            this.valArr[idx] = new Node(key, value);
        }
        else {
            this.expand();
            this.set(key, value);
        }
        return this;
    }
    entries() {
        let iterator = new HashMapIterator(this.valArr.values(), (node) => {
            return [node.key, node.val];
        });
        return iterator;
    }
    keys() {
        let iterator = new HashMapIterator(this.valArr.values(), (node) => {
            return node.key;
        });
        return iterator;
    }
    values() {
        let iterator = new HashMapIterator(this.valArr.values(), (node) => {
            return node.val;
        });
        return iterator;
    }
    [Symbol.iterator]() {
        return this.entries();
    }
    [Symbol.toStringTag] = 'HashMap';
    toJSON() {
        let arr = [];
        this.forEach((value, key) => {
            arr.push({ key, val: value });
        });
        return arr;
    }
}
export default HashMap;
//# sourceMappingURL=data:application/json;base64,